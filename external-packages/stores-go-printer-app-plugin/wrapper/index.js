var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var BluetoothSerialOriginal = /** @class */ (function (_super) {
    __extends(BluetoothSerialOriginal, _super);
    function BluetoothSerialOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BluetoothSerialOriginal.prototype.connect = function (macAddress_or_uuid, data) { return cordova(this, "connect", {}, arguments); };
    BluetoothSerialOriginal.prototype.connectInsecure = function (macAddress) { return cordova(this, "connectInsecure", {}, arguments); };
    BluetoothSerialOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    BluetoothSerialOriginal.prototype.write = function (data) { return cordova(this, "write", {}, arguments); };
    BluetoothSerialOriginal.prototype.available = function () { return cordova(this, "available", {}, arguments); };
    BluetoothSerialOriginal.prototype.read = function () { return cordova(this, "read", {}, arguments); };
    BluetoothSerialOriginal.prototype.readUntil = function (delimiter) { return cordova(this, "readUntil", {}, arguments); };
    BluetoothSerialOriginal.prototype.subscribe = function (delimiter) { return cordova(this, "subscribe", {}, arguments); };
    BluetoothSerialOriginal.prototype.subscribeRawData = function () { return cordova(this, "subscribeRawData", {}, arguments); };
    BluetoothSerialOriginal.prototype.clear = function () { return cordova(this, "clear", {}, arguments); };
    BluetoothSerialOriginal.prototype.list = function () { return cordova(this, "list", {}, arguments); };
    BluetoothSerialOriginal.prototype.isEnabled = function () { return cordova(this, "isEnabled", {}, arguments); };
    BluetoothSerialOriginal.prototype.isConnected = function () { return cordova(this, "isConnected", {}, arguments); };
    BluetoothSerialOriginal.prototype.readRSSI = function () { return cordova(this, "readRSSI", {}, arguments); };
    BluetoothSerialOriginal.prototype.showBluetoothSettings = function () { return cordova(this, "showBluetoothSettings", {}, arguments); };
    BluetoothSerialOriginal.prototype.enable = function () { return cordova(this, "enable", {}, arguments); };
    BluetoothSerialOriginal.prototype.discoverUnpaired = function () { return cordova(this, "discoverUnpaired", {}, arguments); };
    BluetoothSerialOriginal.prototype.setDeviceDiscoveredListener = function () { return cordova(this, "setDeviceDiscoveredListener", {}, arguments); };
    BluetoothSerialOriginal.prototype.setName = function (newName) { return cordova(this, "setName", {}, arguments); };
    BluetoothSerialOriginal.prototype.setDiscoverable = function (discoverableDuration) { return cordova(this, "setDiscoverable", {}, arguments); };
    BluetoothSerialOriginal.pluginName = "BluetoothSerial";
    BluetoothSerialOriginal.plugin = "cordova-plugin-bluetooth-serial";
    BluetoothSerialOriginal.pluginRef = "bluetoothSerial";
    BluetoothSerialOriginal.repo = "https://github.com/rigasp/BluetoothSerial.git";
    BluetoothSerialOriginal.install = "";
    BluetoothSerialOriginal.installVariables = [];
    BluetoothSerialOriginal.platforms = ["Android", "iOS", "Windows Phone 8"];
    return BluetoothSerialOriginal;
}(AwesomeCordovaNativePlugin));
var BluetoothSerial = new BluetoothSerialOriginal();
export { BluetoothSerial };
//# sourceMappingURL=data:application/json;base64,