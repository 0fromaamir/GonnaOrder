import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
var BluetoothSerial = /** @class */ (function (_super) {
    __extends(BluetoothSerial, _super);
    function BluetoothSerial() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BluetoothSerial.prototype.connect = function (macAddress_or_uuid, data) { return cordova(this, "connect", {}, arguments); };
    BluetoothSerial.prototype.connectInsecure = function (macAddress) { return cordova(this, "connectInsecure", {}, arguments); };
    BluetoothSerial.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    BluetoothSerial.prototype.write = function (data) { return cordova(this, "write", {}, arguments); };
    BluetoothSerial.prototype.available = function () { return cordova(this, "available", {}, arguments); };
    BluetoothSerial.prototype.read = function () { return cordova(this, "read", {}, arguments); };
    BluetoothSerial.prototype.readUntil = function (delimiter) { return cordova(this, "readUntil", {}, arguments); };
    BluetoothSerial.prototype.subscribe = function (delimiter) { return cordova(this, "subscribe", {}, arguments); };
    BluetoothSerial.prototype.subscribeRawData = function () { return cordova(this, "subscribeRawData", {}, arguments); };
    BluetoothSerial.prototype.clear = function () { return cordova(this, "clear", {}, arguments); };
    BluetoothSerial.prototype.list = function () { return cordova(this, "list", {}, arguments); };
    BluetoothSerial.prototype.isEnabled = function () { return cordova(this, "isEnabled", {}, arguments); };
    BluetoothSerial.prototype.isConnected = function () { return cordova(this, "isConnected", {}, arguments); };
    BluetoothSerial.prototype.readRSSI = function () { return cordova(this, "readRSSI", {}, arguments); };
    BluetoothSerial.prototype.showBluetoothSettings = function () { return cordova(this, "showBluetoothSettings", {}, arguments); };
    BluetoothSerial.prototype.enable = function () { return cordova(this, "enable", {}, arguments); };
    BluetoothSerial.prototype.discoverUnpaired = function () { return cordova(this, "discoverUnpaired", {}, arguments); };
    BluetoothSerial.prototype.setDeviceDiscoveredListener = function () { return cordova(this, "setDeviceDiscoveredListener", {}, arguments); };
    BluetoothSerial.prototype.setName = function (newName) { return cordova(this, "setName", {}, arguments); };
    BluetoothSerial.prototype.setDiscoverable = function (discoverableDuration) { return cordova(this, "setDiscoverable", {}, arguments); };
    BluetoothSerial.pluginName = "BluetoothSerial";
    BluetoothSerial.plugin = "cordova-plugin-bluetooth-serial";
    BluetoothSerial.pluginRef = "bluetoothSerial";
    BluetoothSerial.repo = "https://github.com/rigasp/BluetoothSerial.git";
    BluetoothSerial.install = "";
    BluetoothSerial.installVariables = [];
    BluetoothSerial.platforms = ["Android", "iOS", "Windows Phone 8"];
    BluetoothSerial.decorators = [
        { type: Injectable }
    ];
    return BluetoothSerial;
}(AwesomeCordovaNativePlugin));
export { BluetoothSerial };
//# sourceMappingURL=data:application/json;base64,